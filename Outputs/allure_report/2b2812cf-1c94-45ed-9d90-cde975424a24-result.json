{"name": "test_baidu_get_study_max_sort[test_data1]", "status": "broken", "statusDetails": {"message": "TypeError: object supporting the buffer API required", "trace": "@pytest.fixture(scope=\"session\", autouse=True)\n    def setup():\n        # TODO 在执行项目代码之前，最先执行这个方法\n        print(\"启动建立数据库连接\")\n        # 测试项目资讯平台数据库连接\n>       baidu_manager_conn = get_baidu_manage_db_conn()\n\ntest_case/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ncommon/singleton.py:11: in _singleton\n    instances[cls] = cls(*args,**kw)\nconfig/dbConnectPool/db_all.py:13: in get_baidu_manage_db_conn\n    conn = DbUtils.get_db_conn(db_obj)\ncommon/db_utils.py:18: in get_db_conn\n    charset=\"utf8\"  # 编码\n../KYJJ-Manager-InterfaceTest/venv/lib/python3.7/site-packages/pymysql/connections.py:353: in __init__\n    self.connect()\n../KYJJ-Manager-InterfaceTest/venv/lib/python3.7/site-packages/pymysql/connections.py:633: in connect\n    self._request_authentication()\n../KYJJ-Manager-InterfaceTest/venv/lib/python3.7/site-packages/pymysql/connections.py:863: in _request_authentication\n    authresp = _auth.scramble_native_password(self.password, self.salt)\n../KYJJ-Manager-InterfaceTest/venv/lib/python3.7/site-packages/pymysql/_auth.py:34: in scramble_native_password\n    stage1 = sha1_new(password).digest()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nname = 'sha1', data = 123456, kwargs = {}\n\n    def __hash_new(name, data=b'', **kwargs):\n        \"\"\"new(name, data=b'') - Return a new hashing object using the named algorithm;\n        optionally initialized with data (which must be a bytes-like object).\n        \"\"\"\n        if name in {'blake2b', 'blake2s'}:\n            # Prefer our blake2 implementation.\n            # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.\n            # It does neither support keyed blake2 nor advanced features like\n            # salt, personal, tree hashing or SSE.\n            return __get_builtin_constructor(name)(data, **kwargs)\n        try:\n>           return _hashlib.new(name, data)\nE           TypeError: object supporting the buffer API required\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/hashlib.py:150: TypeError"}, "parameters": [{"name": "test_data", "value": "{'name': '一个接口，写多条case2', 'request': {'method': 'post', 'uri': '/api/baidu/baidu/test/study/max', 'headers': {'Content-Type': 'application/json'}, 'datas': {'deliveryPlatform': 2, 'position': 2}}, 'assertion': [[{'expectation': '操作成功'}, {'compare': 'in'}, {'ctual_value': None}]]}"}], "start": 1685610633511, "stop": 1685610633511, "uuid": "2d0e6684-5a15-42ce-8396-db85c49063a6", "historyId": "ab1ae9b8d5bba1594c0891a83eb3f28a", "testCaseId": "441605109c52c99b15b31531451711c4", "fullName": "test_case.test_demo1.Test_Demo1#test_baidu_get_study_max_sort", "labels": [{"name": "story", "value": "一个接口，写多条case"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_demo1"}, {"name": "subSuite", "value": "Test_Demo1"}, {"name": "host", "value": "zhaohuideMacBook-Pro.local"}, {"name": "thread", "value": "34389-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_demo1"}]}